worker_processes 1;

events { worker_connections 1024; }

http {

    proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
    proxy_temp_path /var/tmp;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;

    server {
      listen 80;
      server_name localhost;
      error_log  /var/log/nginx/error.log;
      access_log /var/log/nginx/access.log;

      location / {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        root /usr/share/nginx/hit;
        try_files $uri /index.html;
      }
    }

    server {
      listen 443 ssl;
      server_name localhost;
      error_log  /var/log/nginx/error.log;
      access_log /var/log/nginx/access.log;

      # These SSL cert files are managed by the kubernetes controller that this nginx server will end up running in
      ssl_certificate     /etc/ssl-certs/fullchain;
      ssl_certificate_key /etc/ssl-certs/privkey;
      ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;

      location / {
        # TODO: We should eventually do the opposite of this (redirect HTTP to HTTPS)
        return 302 http://$host$request_uri;
      }
    }
}
